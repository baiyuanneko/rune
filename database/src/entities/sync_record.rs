//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use anyhow::Result;
use sea_orm::entity::prelude::*;

use ::sync::hlc::HLC;

use crate::sync::utils::parse_hlc;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "sync_record")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub table_name: String,
    #[sea_orm(column_type = "Text")]
    pub client_node_id: String,
    #[sea_orm(column_type = "Text")]
    pub last_sync_hlc_ts: String,
    pub last_sync_hlc_ver: i32,
    #[sea_orm(column_type = "Text")]
    pub last_sync_hlc_nid: String,
}

impl Model {
    pub fn get_hlc(&self) -> Result<HLC> {
        parse_hlc(
            &self.last_sync_hlc_ts,
            self.last_sync_hlc_ver,
            &self.last_sync_hlc_nid,
        )
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
