//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media_file_artists")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub media_file_id: i32,
    pub artist_id: i32,
    #[sea_orm(column_type = "Text")]
    pub hlc_uuid: String,
    #[sea_orm(column_type = "Text")]
    pub created_at_hlc_ts: String,
    pub created_at_hlc_ver: i32,
    #[sea_orm(column_type = "Text")]
    pub created_at_hlc_nid: String,
    #[sea_orm(column_type = "Text")]
    pub updated_at_hlc_ts: String,
    pub updated_at_hlc_ver: i32,
    #[sea_orm(column_type = "Text")]
    pub updated_at_hlc_nid: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::artists::Entity",
        from = "Column::ArtistId",
        to = "super::artists::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Artists,
    #[sea_orm(
        belongs_to = "super::media_files::Entity",
        from = "Column::MediaFileId",
        to = "super::media_files::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    MediaFiles,
}

impl Related<super::artists::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artists.def()
    }
}

impl Related<super::media_files::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MediaFiles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
